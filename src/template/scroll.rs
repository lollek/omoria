use std::collections::HashMap;

use model;
use misc;

#[derive(Copy, Clone, Eq, PartialEq, Hash)]
pub enum ScrollTemplate {
    AggravateMonster,
    Blessing,
    CreateFood,
    CurseArmor,
    CurseWeapon,
    Darkness,
    Destruction,
    DetectInvisible,
    DispelUndead,
    DoorCreation,
    DoorStairLocation,
    EnchantArmor,
    EnchantWeapon,
    EnchantWeaponToDam,
    EnchantWeaponToHit,
    FeignDeath,
    Genocide,
    HolyChant,
    HolyPrayer,
    Identify,
    Light,
    MagicMapping,
    MakeMunchies,
    MassGenocide,
    MonsterConfusion,
    ObjectDetection,
    PhaseDoor,
    ProtectionFromEvil,
    Recharging,
    RemoveCurse,
    RuneOfProtection,
    SleepMonster,
    SummonMonster,
    SummonUndead,
    Teleport,
    TeleportLevel,
    TrapCreation,
    TrapDetection,
    TrapDoorDestruction,
    TreasureDetection,
    Wishing,
    WordOfRecall,
}

pub fn generate_scroll(item_level: u8) -> model::Item {
    let template: ScrollTemplate = generate_template(item_level);
    model::Item {
        name: misc::rs2item_name(format!("{}{}", "& Scroll~ %T| of ", template.name()).as_str()),
        tval: model::ItemType::Scroll1 as u8,
        flags: template.flags1(),
        flags2: template.flags2(),
        p1: 0,
        cost: template.cost(),
        subval: template.subval(),
        weight: 5,
        number: 1,
        tohit: 0,
        todam: 0,
        ac: 0,
        toac: 0,
        damage: misc::rs2item_damage("0d0"),
        level: item_level as i8,
        identified: 0,
    }
}

fn generate_template(item_level: u8) -> ScrollTemplate {
    let usable_level: HashMap<ScrollTemplate, u8> = [
        (ScrollTemplate::Light, 0),
        (ScrollTemplate::ObjectDetection, 0),
        (ScrollTemplate::TreasureDetection, 0),
        (ScrollTemplate::Blessing, 1),
        (ScrollTemplate::Darkness, 1),
        (ScrollTemplate::DetectInvisible, 1),
        (ScrollTemplate::Identify, 1),
        (ScrollTemplate::PhaseDoor, 1),
        (ScrollTemplate::SummonMonster, 1),
        (ScrollTemplate::AggravateMonster, 5),
        (ScrollTemplate::MagicMapping, 5),
        (ScrollTemplate::MonsterConfusion, 5),
        (ScrollTemplate::SleepMonster, 5),
        (ScrollTemplate::TrapDetection, 5),
        (ScrollTemplate::WordOfRecall, 5),
        (ScrollTemplate::RemoveCurse, 7),
        (ScrollTemplate::CreateFood, 10),
        (ScrollTemplate::DoorStairLocation, 10),
        (ScrollTemplate::FeignDeath, 10),
        (ScrollTemplate::Teleport, 10),
        (ScrollTemplate::DoorCreation, 12),
        (ScrollTemplate::EnchantArmor, 12),
        (ScrollTemplate::EnchantWeaponToDam, 12),
        (ScrollTemplate::EnchantWeaponToHit, 12),
        (ScrollTemplate::HolyChant, 12),
        (ScrollTemplate::TrapCreation, 12),
        (ScrollTemplate::TrapDoorDestruction, 12),
        (ScrollTemplate::SummonUndead, 15),
        (ScrollTemplate::TeleportLevel, 15),
        (ScrollTemplate::HolyPrayer, 25),
        (ScrollTemplate::MakeMunchies, 25),
        (ScrollTemplate::ProtectionFromEvil, 30),
        (ScrollTemplate::Genocide, 30),
        (ScrollTemplate::Destruction, 40),
        (ScrollTemplate::DispelUndead, 40),
        (ScrollTemplate::Recharging, 40),
        (ScrollTemplate::CurseArmor, 50),
        (ScrollTemplate::CurseWeapon, 50),
        (ScrollTemplate::EnchantWeapon, 50),
        (ScrollTemplate::MassGenocide, 50),
        (ScrollTemplate::RuneOfProtection, 50),
        (ScrollTemplate::Wishing, 50),
    ].iter().cloned().collect();

    let available_templates: Vec<ScrollTemplate> = usable_level.into_iter()
        .filter(|(_template, level)| level >= &item_level)
        .map(|(template, _level)| template)
        .collect();

    available_templates[rand::random::<usize>() % available_templates.len()]
}

impl ScrollTemplate {
    fn name(&self) -> String {
        match self {
            ScrollTemplate::AggravateMonster => "Trap/Door Destruction",
            ScrollTemplate::Blessing => "Blessing",
            ScrollTemplate::CreateFood => "Create Food",
            ScrollTemplate::CurseArmor => "Curse Armor",
            ScrollTemplate::CurseWeapon => "Curse Weapon",
            ScrollTemplate::Darkness => "Darkness",
            ScrollTemplate::Destruction => "Destruction",
            ScrollTemplate::DetectInvisible => "Detect Invisible",
            ScrollTemplate::DispelUndead => "Dispel Undead",
            ScrollTemplate::DoorCreation => "Door Creation",
            ScrollTemplate::DoorStairLocation => "Door/Stair Location",
            ScrollTemplate::EnchantArmor => "Enchant Armor",
            ScrollTemplate::EnchantWeapon => "Enchant Weapon",
            ScrollTemplate::EnchantWeaponToDam => "Enchant Weapon To Dam",
            ScrollTemplate::EnchantWeaponToHit => "Enchant Weapon To Hit",
            ScrollTemplate::FeignDeath => "Feign Death",
            ScrollTemplate::Genocide => "Genocide",
            ScrollTemplate::HolyChant => "Holy Chant",
            ScrollTemplate::HolyPrayer => "Holy Prayer",
            ScrollTemplate::Identify => "Identify",
            ScrollTemplate::Light => "Light",
            ScrollTemplate::MagicMapping => "Magic Mapping",
            ScrollTemplate::MakeMunchies => "Make Munchies",
            ScrollTemplate::MassGenocide => "Mass Genocide",
            ScrollTemplate::MonsterConfusion => "Monster Confusion",
            ScrollTemplate::ObjectDetection => "Object Detection",
            ScrollTemplate::PhaseDoor => "Phase Door",
            ScrollTemplate::ProtectionFromEvil => "Protection from Evil",
            ScrollTemplate::Recharging => "Recharging",
            ScrollTemplate::RemoveCurse => "Remove Curse",
            ScrollTemplate::RuneOfProtection => "Rune of Protection",
            ScrollTemplate::SleepMonster => "Sleep Monster",
            ScrollTemplate::SummonMonster => "Summon Monster",
            ScrollTemplate::SummonUndead => "Summon Undead",
            ScrollTemplate::Teleport => "Teleport",
            ScrollTemplate::TeleportLevel => "Teleport Level",
            ScrollTemplate::TrapCreation => "Trap Creation",
            ScrollTemplate::TrapDetection => "Trap Detection",
            ScrollTemplate::TrapDoorDestruction => "Trap/Door Destruction",
            ScrollTemplate::TreasureDetection => "Treasure Detection",
            ScrollTemplate::Wishing => "Wishing",
            ScrollTemplate::WordOfRecall => "Word of Recall",
        }.to_string()
    }

    fn flags1(&self) -> u64 {
        match self {
            ScrollTemplate::AggravateMonster => 0x00000000,
            ScrollTemplate::Blessing => 0x00000010,
            ScrollTemplate::CreateFood => 0x00000000,
            ScrollTemplate::CurseArmor => 0x00000004,
            ScrollTemplate::CurseWeapon => 0x00000001,
            ScrollTemplate::Darkness => 0x00000000,
            ScrollTemplate::Destruction => 0x00000100,
            ScrollTemplate::DetectInvisible => 0x00000000,
            ScrollTemplate::DispelUndead => 0x00000000,
            ScrollTemplate::DoorCreation => 0x00000000,
            ScrollTemplate::DoorStairLocation => 0x00000000,
            ScrollTemplate::EnchantArmor => 0x00000000,
            ScrollTemplate::EnchantWeapon => 0x00000000,
            ScrollTemplate::EnchantWeaponToDam => 0x00000000,
            ScrollTemplate::EnchantWeaponToHit => 0x00000000,
            ScrollTemplate::FeignDeath => 0x00000400,
            ScrollTemplate::Genocide => 0x00000000,
            ScrollTemplate::HolyChant => 0x00000020,
            ScrollTemplate::HolyPrayer => 0x00000040,
            ScrollTemplate::Identify => 0x00000000,
            ScrollTemplate::Light => 0x00000000,
            ScrollTemplate::MagicMapping => 0x00000000,
            ScrollTemplate::MakeMunchies => 0x00000800,
            ScrollTemplate::MassGenocide => 0x00000000,
            ScrollTemplate::MonsterConfusion => 0x00000000,
            ScrollTemplate::ObjectDetection => 0x00000000,
            ScrollTemplate::PhaseDoor => 0x00000000,
            ScrollTemplate::ProtectionFromEvil => 0x00000000,
            ScrollTemplate::Recharging => 0x00000000,
            ScrollTemplate::RemoveCurse => 0x00000000,
            ScrollTemplate::RuneOfProtection => 0x00000000,
            ScrollTemplate::SleepMonster => 0x00000000,
            ScrollTemplate::SummonMonster => 0x00000000,
            ScrollTemplate::SummonUndead => 0x00000008,
            ScrollTemplate::Teleport => 0x00000000,
            ScrollTemplate::TeleportLevel => 0x00000000,
            ScrollTemplate::TrapCreation => 0x00000000,
            ScrollTemplate::TrapDetection => 0x00000000,
            ScrollTemplate::TrapDoorDestruction => 0x00000000,
            ScrollTemplate::TreasureDetection => 0x00000000,
            ScrollTemplate::Wishing => 0x00000200,
            ScrollTemplate::WordOfRecall => 0x00000080,
        }
    }

    fn flags2(&self) -> u64 {
        match self {
            ScrollTemplate::AggravateMonster => 0x00100000,
            ScrollTemplate::Blessing => 0x00000000,
            ScrollTemplate::CreateFood => 0x10000000,
            ScrollTemplate::CurseArmor => 0x00000000,
            ScrollTemplate::CurseWeapon => 0x00000000,
            ScrollTemplate::Darkness => 0x04000000,
            ScrollTemplate::Destruction => 0x00000000,
            ScrollTemplate::DetectInvisible => 0x00080000,
            ScrollTemplate::DispelUndead => 0x20000000,
            ScrollTemplate::DoorCreation => 0x00800000,
            ScrollTemplate::DoorStairLocation => 0x00020000,
            ScrollTemplate::EnchantArmor => 0x00000004,
            ScrollTemplate::EnchantWeapon => 0x00000002,
            ScrollTemplate::EnchantWeaponToDam => 0x00000001,
            ScrollTemplate::EnchantWeaponToHit => 0x00000000,
            ScrollTemplate::FeignDeath => 0x00000000,
            ScrollTemplate::Genocide => 0x02000000,
            ScrollTemplate::HolyChant => 0x00000000,
            ScrollTemplate::HolyPrayer => 0x00000000,
            ScrollTemplate::Identify => 0x00000008,
            ScrollTemplate::Light => 0x00000020,
            ScrollTemplate::MagicMapping => 0x00000800,
            ScrollTemplate::MakeMunchies => 0x00000000,
            ScrollTemplate::MassGenocide => 0x00040000,
            ScrollTemplate::MonsterConfusion => 0x00000400,
            ScrollTemplate::ObjectDetection => 0x00008000,
            ScrollTemplate::PhaseDoor => 0x00000080,
            ScrollTemplate::ProtectionFromEvil => 0x08000000,
            ScrollTemplate::Recharging => 0x01000000,
            ScrollTemplate::RemoveCurse => 0x00000010,
            ScrollTemplate::RuneOfProtection => 0x00002000,
            ScrollTemplate::SleepMonster => 0x00001000,
            ScrollTemplate::SummonMonster => 0x00000040,
            ScrollTemplate::SummonUndead => 0x00000000,
            ScrollTemplate::Teleport => 0x00000200,
            ScrollTemplate::TeleportLevel => 0x00000100,
            ScrollTemplate::TrapCreation => 0x00200000,
            ScrollTemplate::TrapDetection => 0x00010000,
            ScrollTemplate::TrapDoorDestruction => 0x00400000,
            ScrollTemplate::TreasureDetection => 0x00004000,
            ScrollTemplate::Wishing => 0x00000000,
            ScrollTemplate::WordOfRecall => 0x00000000,
        }
    }

    fn cost(&self) -> i64 {
        match self {
            ScrollTemplate::AggravateMonster => 0,
            ScrollTemplate::Blessing => 15,
            ScrollTemplate::CreateFood => 15,
            ScrollTemplate::CurseArmor => 0,
            ScrollTemplate::CurseWeapon => 0,
            ScrollTemplate::Darkness => 0,
            ScrollTemplate::Destruction => 250,
            ScrollTemplate::DetectInvisible => 15,
            ScrollTemplate::DispelUndead => 200,
            ScrollTemplate::DoorCreation => 100,
            ScrollTemplate::DoorStairLocation => 35,
            ScrollTemplate::EnchantArmor => 125,
            ScrollTemplate::EnchantWeapon => 125,
            ScrollTemplate::EnchantWeaponToDam => 125,
            ScrollTemplate::EnchantWeaponToHit => 500,
            ScrollTemplate::FeignDeath => 0,
            ScrollTemplate::Genocide => 750,
            ScrollTemplate::HolyChant => 40,
            ScrollTemplate::HolyPrayer => 80,
            ScrollTemplate::Identify => 50,
            ScrollTemplate::Light => 15,
            ScrollTemplate::MagicMapping => 40,
            ScrollTemplate::MakeMunchies => 150,
            ScrollTemplate::MassGenocide => 1000,
            ScrollTemplate::MonsterConfusion => 30,
            ScrollTemplate::ObjectDetection => 15,
            ScrollTemplate::PhaseDoor => 15,
            ScrollTemplate::ProtectionFromEvil => 50,
            ScrollTemplate::Recharging => 200,
            ScrollTemplate::RemoveCurse => 100,
            ScrollTemplate::RuneOfProtection => 500,
            ScrollTemplate::SleepMonster => 35,
            ScrollTemplate::SummonMonster => 0,
            ScrollTemplate::SummonUndead => 0,
            ScrollTemplate::Teleport => 50,
            ScrollTemplate::TeleportLevel => 40,
            ScrollTemplate::TrapCreation => 0,
            ScrollTemplate::TrapDetection => 35,
            ScrollTemplate::TrapDoorDestruction => 50,
            ScrollTemplate::TreasureDetection => 15,
            ScrollTemplate::Wishing => 15000,
            ScrollTemplate::WordOfRecall => 150,
        }
    }

    fn subval(&self) -> i64 {
        match self {
            ScrollTemplate::AggravateMonster => 277,
            ScrollTemplate::Blessing => 262,
            ScrollTemplate::CreateFood => 285,
            ScrollTemplate::CurseArmor => 260,
            ScrollTemplate::CurseWeapon => 258,
            ScrollTemplate::Darkness => 283,
            ScrollTemplate::Destruction => 266,
            ScrollTemplate::DetectInvisible => 276,
            ScrollTemplate::DispelUndead => 286,
            ScrollTemplate::DoorCreation => 280,
            ScrollTemplate::DoorStairLocation => 274,
            ScrollTemplate::EnchantArmor => 259,
            ScrollTemplate::EnchantWeapon => 258,
            ScrollTemplate::EnchantWeaponToDam => 257,
            ScrollTemplate::EnchantWeaponToHit => 257,
            ScrollTemplate::FeignDeath => 268,
            ScrollTemplate::Genocide => 282,
            ScrollTemplate::HolyChant => 263,
            ScrollTemplate::HolyPrayer => 264,
            ScrollTemplate::Identify => 260,
            ScrollTemplate::Light => 262,
            ScrollTemplate::MagicMapping => 268,
            ScrollTemplate::MakeMunchies => 269,
            ScrollTemplate::MassGenocide => 275,
            ScrollTemplate::MonsterConfusion => 267,
            ScrollTemplate::ObjectDetection => 272,
            ScrollTemplate::PhaseDoor => 264,
            ScrollTemplate::ProtectionFromEvil => 284,
            ScrollTemplate::Recharging => 281,
            ScrollTemplate::RemoveCurse => 261,
            ScrollTemplate::RuneOfProtection => 270,
            ScrollTemplate::SleepMonster => 269,
            ScrollTemplate::SummonMonster => 263,
            ScrollTemplate::SummonUndead => 261,
            ScrollTemplate::Teleport => 266,
            ScrollTemplate::TeleportLevel => 265,
            ScrollTemplate::TrapCreation => 278,
            ScrollTemplate::TrapDetection => 273,
            ScrollTemplate::TrapDoorDestruction => 279,
            ScrollTemplate::TreasureDetection => 271,
            ScrollTemplate::Wishing => 267,
            ScrollTemplate::WordOfRecall => 265,
        }
    }
}
